chat model

# CREATE TABLE conversations (
#     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
#     user1_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
#     user2_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
#     is_archived BOOLEAN DEFAULT FALSE,
#     created_at TIMESTAMP DEFAULT NOW(),
#     UNIQUE(user1_id, user2_id)
# );
# CREATE TABLE messages (
#     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
#     conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
#     sender_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
#     content TEXT NOT NULL,
#     reply_to_id UUID REFERENCES messages(id) ON DELETE SET NULL, -- Optional: replies to another message
#     message_type VARCHAR(20) DEFAULT 'text', -- Supports other types like 'image', 'video'
#     created_at TIMESTAMP DEFAULT NOW()
# );
# CREATE TABLE message_reactions (
#     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
#     message_id UUID NOT NULL REFERENCES messages(id) ON DELETE CASCADE,
#     user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
#     emoji VARCHAR(10) NOT NULL, -- Unicode or short name for the emoji
#     created_at TIMESTAMP DEFAULT NOW(),
#     UNIQUE(message_id, user_id, emoji) -- Ensures no duplicate reactions from the same user
# );
# CREATE TABLE read_receipts (
#     id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
#     conversation_id UUID NOT NULL REFERENCES conversations(id) ON DELETE CASCADE,
#     user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
#     last_read_message_id UUID NOT NULL REFERENCES messages(id) ON DELETE CASCADE,
#     updated_at TIMESTAMP DEFAULT NOW() ON UPDATE NOW(),
#     UNIQUE(conversation_id, user_id) -- Ensures one record per user per conversation
# );

# Sample Use Cases and Queries
# Update Read Receipts When a User Reads a New Message:
# INSERT INTO read_receipts (conversation_id, user_id, last_read_message_id, updated_at)
# VALUES ('conversation_id', 'user_id', 'message_id', NOW())
# ON CONFLICT (conversation_id, user_id) 
# DO UPDATE SET last_read_message_id = 'message_id', updated_at = NOW();
# Fetch Unread Messages for a User:
# SELECT m.*
# FROM messages m
# JOIN read_receipts rr ON m.conversation_id = rr.conversation_id
# WHERE m.created_at > (
#     SELECT created_at 
#     FROM messages 
#     WHERE id = rr.last_read_message_id
# )
# AND rr.user_id = 'user_id';
# Fetch All Conversations with Read/Unread Status:
# SELECT c.id AS conversation_id,
#        u1.username AS user1,
#        u2.username AS user2,
#        (SELECT COUNT(*) 
#         FROM messages m 
#         WHERE m.conversation_id = c.id 
#         AND m.created_at > (
#             SELECT created_at 
#             FROM messages 
#             WHERE id = rr.last_read_message_id
#         )) AS unread_messages
# FROM conversations c
# JOIN users u1 ON c.user1_id = u1.id
# JOIN users u2 ON c.user2_id = u2.id
# LEFT JOIN read_receipts rr ON rr.conversation_id = c.id AND rr.user_id = 'current_user_id';
# Fetch Users Who Have Read a Specific Message:
# SELECT u.username
# FROM read_receipts rr
# JOIN users u ON rr.user_id = u.id
# WHERE rr.last_read_message_id >= 'message_id'
# AND rr.conversation_id = 'conversation_id';